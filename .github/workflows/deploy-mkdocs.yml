name: Deploy MkDocs to IIS - Simple Version

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy MkDocs Site
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Environment Check
        shell: powershell
        run: |
          Write-Host "=== Environment Check ==="
          Set-Location "${{ github.workspace }}"
          Write-Host "Current directory: $(Get-Location)"
          
          if (Test-Path "mkdocs.yml") {
            Write-Host "mkdocs.yml found"
          } else {
            Write-Host "mkdocs.yml not found"
            exit 1
          }

      - name: Build MkDocs Site
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}"
          
          Write-Host "=== Building MkDocs Site ==="
          
          $env:PYTHONIOENCODING = "utf-8"
          $env:LANG = "en_US.UTF-8"
          
          Write-Host "Running mkdocs build"
          python -m mkdocs build --clean --verbose
          
          $buildExitCode = $LASTEXITCODE
          Write-Host "Build exit code: $buildExitCode"
          
          if ($buildExitCode -eq 0) {
            Write-Host "Build successful"
            if (Test-Path "site") {
              Write-Host "Site directory created"
            } else {
              Write-Host "Site directory not found"
              exit 1
            }
          } else {
            Write-Host "Build failed"
            exit $buildExitCode
          }

      - name: Deploy to IIS
        shell: powershell
        run: |
          Write-Host "=== IIS Deployment ==="
          
          $targetPath = "C:\inetpub\wwwroot\webkesht_docs"
          $sourcePath = "${{ github.workspace }}\site"
          
          # Check for language specific directories
          if (Test-Path "${{ github.workspace }}\site\fa") {
            $sourcePath = "${{ github.workspace }}\site\fa"
            Write-Host "Using FA directory"
          } elseif (Test-Path "${{ github.workspace }}\site\ar") {
            $sourcePath = "${{ github.workspace }}\site\ar"
            Write-Host "Using AR directory"
          } else {
            Write-Host "Using main site directory"
          }
          
          Write-Host "Source: $sourcePath"
          Write-Host "Target: $targetPath"
          
          # Stop IIS App Pool if exists
          try {
            Import-Module WebAdministration -ErrorAction SilentlyContinue
            $appPoolName = "webkesht_docs"
            if (Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue) {
              Stop-WebAppPool -Name $appPoolName -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 3
              Write-Host "App pool stopped"
            }
          } catch {
            Write-Host "IIS management skipped"
          }
          
          # Create target directory
          if (-not (Test-Path $targetPath)) {
            New-Item -ItemType Directory -Force -Path $targetPath
            Write-Host "Target directory created"
          }
          
          # Clean target directory
          try {
            Remove-Item -Path "$targetPath\*" -Recurse -Force -ErrorAction Stop
            Write-Host "Target directory cleaned"
          } catch {
            Write-Host "Clean failed, continuing"
          }
          
          # Copy files using ROBOCOPY
          Write-Host "Copying files with ROBOCOPY"
          robocopy "$sourcePath" "$targetPath" /E /R:2 /W:3
          $robocopyExitCode = $LASTEXITCODE
          
          if ($robocopyExitCode -le 7) {
            Write-Host "Copy successful"
          } else {
            Write-Host "ROBOCOPY failed, trying PowerShell copy"
            try {
              Copy-Item -Path "$sourcePath\*" -Destination $targetPath -Recurse -Force
              Write-Host "PowerShell copy successful"
            } catch {
              Write-Host "All copy methods failed"
              exit 1
            }
          }
          
          # Start IIS App Pool if exists
          try {
            if (Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue) {
              Start-WebAppPool -Name $appPoolName -ErrorAction SilentlyContinue
              Write-Host "App pool started"
            }
          } catch {
            Write-Host "IIS restart skipped"
          }
          
          # Verify deployment
          $deployedFiles = Get-ChildItem -Path $targetPath -Recurse -File
          Write-Host "Deployment completed - Total files: $($deployedFiles.Count)"
          
          if (Test-Path "$targetPath\index.html") {
            Write-Host "index.html found - Deployment verified"
          } else {
            Write-Host "index.html not found"
          }
          
          Write-Host "Deployment finished"
