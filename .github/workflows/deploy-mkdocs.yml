name: Deploy MkDocs to IIS - Deploy Fixed V7

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy MkDocs Site
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Environment Check
        shell: powershell
        run: |
          Write-Host "=== Environment Check ==="
          Set-Location "${{ github.workspace }}"
          Write-Host "Current directory: $(Get-Location)"
          
          Write-Host "`n=== File Structure ==="
          Get-ChildItem -Recurse | Select-Object FullName | Format-Table -AutoSize
          
          Write-Host "`n=== MkDocs Configuration Content ==="
          $configContent = Get-Content -Path "mkdocs.yml" -Encoding UTF8
          Write-Host "Configuration file content:"
          $configContent | ForEach-Object { Write-Host "  $_" }

      - name: Test MkDocs Commands
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}"
          
          Write-Host "=== Testing Basic MkDocs Commands ==="
          
          Write-Host "Testing mkdocs version:"
          python -m mkdocs --version
          $versionExitCode = $LASTEXITCODE
          Write-Host "Version test completed with exit code: $versionExitCode"
          
          if ($versionExitCode -ne 0) {
            Write-Host "ERROR: MkDocs version command failed!"
            exit $versionExitCode
          }
          
          Write-Host "`nTesting mkdocs help (capturing output safely):"
          try {
            $helpOutput = python -m mkdocs --help 2>&1
            $helpExitCode = $LASTEXITCODE
            
            # نمایش چند خط اول
            $helpOutput | Select-Object -First 10 | ForEach-Object { Write-Host $_ }
            
            Write-Host "Help command exit code: $helpExitCode"
            
            # برای help command، exit code ممکن است -1 باشد که طبیعی است
            if ($helpExitCode -ne 0 -and $helpExitCode -ne -1) {
              Write-Host "WARNING: Help command returned unexpected exit code: $helpExitCode"
            } else {
              Write-Host "Help command completed successfully"
            }
          }
          catch {
            Write-Host "Warning: Could not capture help output: $($_.Exception.Message)"
          }
          
          Write-Host "`nMkDocs commands test completed successfully!"

      - name: Test YAML Parsing
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}"
          
          Write-Host "=== Testing Python YAML parsing ==="
          
          # ایجاد فایل Python موقت برای تست
          $pythonCode = 'import yaml' + "`n"
          $pythonCode += 'import sys' + "`n"
          $pythonCode += 'sys.stdout.reconfigure(encoding="utf-8")' + "`n"
          $pythonCode += 'with open("mkdocs.yml", "r", encoding="utf-8") as f:' + "`n"
          $pythonCode += '    config = yaml.safe_load(f)' + "`n"
          $pythonCode += '    print("YAML parsing successful!")' + "`n"
          $pythonCode += '    print("Site name:", config.get("site_name", "Not found"))' + "`n"
          $pythonCode += '    print("Theme name:", config.get("theme", {}).get("name", "Not found"))'
          
          $pythonCode | Out-File -FilePath "test_yaml.py" -Encoding UTF8
          
          python test_yaml.py
          $yamlExitCode = $LASTEXITCODE
          Write-Host "YAML parsing test completed with exit code: $yamlExitCode"
          
          if ($yamlExitCode -ne 0) {
            Write-Host "ERROR: YAML parsing failed!"
            exit $yamlExitCode
          }
          
          Remove-Item "test_yaml.py" -ErrorAction SilentlyContinue

      - name: Test Minimal Configuration
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}"
          
          Write-Host "=== Creating Minimal Test Configuration ==="
          
          # ایجاد پوشه docs با فایل index
          if (-not (Test-Path "docs_test")) {
            New-Item -ItemType Directory -Name "docs_test" -Force
            "# Test Page`n`nThis is a test page." | Out-File -FilePath "docs_test\index.md" -Encoding UTF8
          }
          
          # اضافه کردن docs directory به کانفیگ
          $minimalConfig = 'site_name: Test Site' + "`n"
          $minimalConfig += 'docs_dir: docs_test' + "`n"
          $minimalConfig += 'theme:' + "`n"
          $minimalConfig += '  name: material'
          
          $minimalConfig | Out-File -FilePath "mkdocs_test.yml" -Encoding UTF8
          
          Write-Host "Minimal config content:"
          Get-Content "mkdocs_test.yml" | ForEach-Object { Write-Host "  $_" }
          
          Write-Host "`nTesting with minimal configuration:"
          Write-Host "Running: python -m mkdocs build --config-file mkdocs_test.yml --verbose"
          
          # اجرای دستور و ذخیره exit code
          python -m mkdocs build --config-file mkdocs_test.yml --verbose
          $buildExitCode = $LASTEXITCODE
          
          Write-Host "`nMinimal build exit code: $buildExitCode"
          
          if ($buildExitCode -eq 0) {
            Write-Host "✅ Minimal config test PASSED"
            if (Test-Path "site") {
              Write-Host "Site directory created for minimal test"
              Remove-Item -Path "site" -Recurse -Force -ErrorAction SilentlyContinue
            }
          } else {
            Write-Host "❌ Minimal config test FAILED with exit code: $buildExitCode"
            Write-Host "This indicates there might be an issue with the Material theme or configuration"
            
            # سعی در تست با theme پیش‌فرض
            Write-Host "`nTrying with default theme..."
            $defaultConfig = 'site_name: Test Site' + "`n"
            $defaultConfig += 'docs_dir: docs_test'
            $defaultConfig | Out-File -FilePath "mkdocs_default_test.yml" -Encoding UTF8
            
            python -m mkdocs build --config-file mkdocs_default_test.yml --verbose
            $defaultExitCode = $LASTEXITCODE
            
            Write-Host "Default theme test exit code: $defaultExitCode"
            
            if ($defaultExitCode -eq 0) {
              Write-Host "✅ Default theme works - issue is with Material theme configuration"
            } else {
              Write-Host "❌ Even default theme fails - there's a deeper issue"
              exit $defaultExitCode
            }
            
            Remove-Item "mkdocs_default_test.yml" -ErrorAction SilentlyContinue
          }
          
          # پاکسازی فایل‌های تست
          Remove-Item "mkdocs_test.yml" -ErrorAction SilentlyContinue
          Remove-Item -Path "docs_test" -Recurse -Force -ErrorAction SilentlyContinue

      - name: Prepare Required Files
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}"
          
          Write-Host "=== Checking Required Directories ==="
          if (-not (Test-Path "docs")) {
            Write-Host "Creating docs directory with index file..."
            New-Item -ItemType Directory -Name "docs" -Force
            "# Welcome`n`nThis is the homepage." | Out-File -FilePath "docs\index.md" -Encoding UTF8
          } else {
            Write-Host "Docs directory exists:"
            Get-ChildItem "docs" | ForEach-Object { Write-Host "  $($_.Name)" }
          }
          
          if (-not (Test-Path "overrides")) {
            Write-Host "Creating overrides directory (referenced in theme.custom_dir)..."
            New-Item -ItemType Directory -Name "overrides" -Force
            Write-Host "Overrides directory created"
          } else {
            Write-Host "Overrides directory exists"
          }
          
          if (-not (Test-Path "stylesheets")) {
            Write-Host "Creating stylesheets directory with custom.css..."
            New-Item -ItemType Directory -Name "stylesheets" -Force
            "/* Custom CSS */" | Out-File -FilePath "stylesheets\custom.css" -Encoding UTF8
            Write-Host "Stylesheets directory and custom.css created"
          } else {
            Write-Host "Stylesheets directory exists"
            if (-not (Test-Path "stylesheets\custom.css")) {
              "/* Custom CSS */" | Out-File -FilePath "stylesheets\custom.css" -Encoding UTF8
              Write-Host "Created missing custom.css"
            }
          }

      - name: Build Site
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}"
          
          Write-Host "=== Building Site with Original Configuration ==="
          
          # تنظیم environment variables برای UTF-8
          $env:PYTHONIOENCODING = "utf-8"
          $env:LANG = "en_US.UTF-8"
          
          Write-Host "Running mkdocs build with verbose output..."
          Write-Host "Command: python -m mkdocs build --clean --verbose"
          
          # اجرای دستور build
          python -m mkdocs build --clean --verbose
          $buildExitCode = $LASTEXITCODE
          
          Write-Host "`nMain build process exit code: $buildExitCode"
          
          if ($buildExitCode -eq 0) {
            Write-Host "`n✅ Build Successful!"
            if (Test-Path "site") {
              Write-Host "Site directory created successfully"
              
              # نمایش ساختار اصلی سایت
              Write-Host "`nSite structure:"
              Get-ChildItem -Path "site" | Select-Object Name, Length | Format-Table -AutoSize
              
              # بررسی پوشه fa
              if (Test-Path "site\fa") {
                Write-Host "`nFA directory contents:"
                Get-ChildItem -Path "site\fa" | Select-Object Name, Length | Format-Table -AutoSize
              } else {
                Write-Host "`nFA directory not created - using default site directory"
              }
            } else {
              Write-Host "❌ ERROR: Site directory was not created despite successful exit code!"
              exit 1
            }
          } else {
            Write-Host "`n❌ Build Failed!"
            Write-Host "Exit code: $buildExitCode"
            exit $buildExitCode
          }

      - name: Stop IIS Application Pool (if exists)
        shell: powershell
        run: |
          Write-Host "=== Stopping IIS Application Pool ==="
          try {
            Import-Module WebAdministration -ErrorAction SilentlyContinue
            
            # بررسی وجود Application Pool
            $appPoolName = "webkesht_docs"
            if (Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue) {
              Write-Host "Stopping Application Pool: $appPoolName"
              Stop-WebAppPool -Name $appPoolName -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 3
              Write-Host "Application Pool stopped"
            } else {
              Write-Host "Application Pool $appPoolName not found - skipping"
            }
          }
          catch {
            Write-Host "Warning: Could not manage IIS Application Pool: $($_.Exception.Message)"
            Write-Host "Continuing with deployment..."
          }

      - name: Deploy to IIS
        shell: powershell
        run: |
          Write-Host "=== Starting Deployment ==="
          $targetPath = "C:\inetpub\wwwroot\webkesht_docs"
          
          # تشخیص مسیر صحیح source
          if (Test-Path "${{ github.workspace }}\site\fa") {
            $sourcePath = "${{ github.workspace }}\site\fa"
            Write-Host "Using FA-specific build: $sourcePath"
          } else {
            $sourcePath = "${{ github.workspace }}\site"
            Write-Host "Using main site build: $sourcePath"
          }

          Write-Host "Deploying from '$sourcePath' to '$targetPath'..."

          # ایجاد target directory در صورت عدم وجود
          if (-not (Test-Path $targetPath)) {
            Write-Host "Creating target directory..."
            New-Item -ItemType Directory -Force -Path $targetPath
          }

          Write-Host "Cleaning target directory with retry mechanism..."
          $maxRetries = 3
          $retryCount = 0
          $cleanSuccess = $false
          
          while ($retryCount -lt $maxRetries -and -not $cleanSuccess) {
            try {
              $retryCount++
              Write-Host "Cleanup attempt $retryCount..."
              
              # پاکسازی با force و ignore errors
              Get-ChildItem -Path $targetPath -Recurse -ErrorAction SilentlyContinue | 
                Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
              
              # بررسی اینکه آیا پاکسازی موفق بوده
              $remainingFiles = Get-ChildItem -Path $targetPath -Recurse -ErrorAction SilentlyContinue
              if ($remainingFiles.Count -eq 0) {
                $cleanSuccess = $true
                Write-Host "✅ Directory cleaned successfully"
              } else {
                Write-Host "⚠️  $($remainingFiles.Count) files remain - retrying..."
                Start-Sleep -Seconds 2
              }
            }
            catch {
              Write-Host "⚠️  Cleanup attempt $retryCount failed: $($_.Exception.Message)"
              if ($retryCount -lt $maxRetries) {
                Start-Sleep -Seconds 3
              }
            }
          }
          
          if (-not $cleanSuccess) {
            Write-Host "⚠️  Complete cleanup failed, but continuing with deployment..."
          }

          Write-Host "Copying files with error handling..."
          $copySuccess = $false
          $copyRetries = 3
          $copyAttempt = 0
          
          while ($copyAttempt -lt $copyRetries -and -not $copySuccess) {
            try {
              $copyAttempt++
              Write-Host "Copy attempt $copyAttempt..."
              
              # کپی کردن فایل‌ها با retry mechanism
              Copy-Item -Path "$sourcePath\*" -Destination $targetPath -Recurse -Force -ErrorAction Stop
              $copySuccess = $true
              Write-Host "✅ Files copied successfully"
            }
            catch {
              Write-Host "⚠️  Copy attempt $copyAttempt failed: $($_.Exception.Message)"
              if ($copyAttempt -lt $copyRetries) {
                Write-Host "Waiting before retry..."
                Start-Sleep -Seconds 5
              } else {
                Write-Host "❌ All copy attempts failed!"
                
                # تلاش برای کپی فایل به فایل
                Write-Host "Trying individual file copy as fallback..."
                try {
                  $sourceFiles = Get-ChildItem -Path $sourcePath -Recurse -File
                  $successCount = 0
                  $failCount = 0
                  
                  foreach ($file in $sourceFiles) {
                    $relativePath = $file.FullName.Substring($sourcePath.Length + 1)
                    $targetFile = Join-Path $targetPath $relativePath
                    $targetDir = Split-Path $targetFile -Parent
                    
                    try {
                      if (-not (Test-Path $targetDir)) {
                        New-Item -ItemType Directory -Path $targetDir -Force -ErrorAction SilentlyContinue
                      }
                      
                      Copy-Item -Path $file.FullName -Destination $targetFile -Force -ErrorAction Stop
                      $successCount++
                    }
                    catch {
                      Write-Host "❌ Failed to copy: $relativePath - $($_.Exception.Message)"
                      $failCount++
                    }
                  }
                  
                  Write-Host "Individual copy results: $successCount succeeded, $failCount failed"
                  if ($successCount -gt 0) {
                    $copySuccess = $true
                  }
                }
                catch {
                  Write-Host "❌ Individual file copy also failed: $($_.Exception.Message)"
                }
              }
            }
          }
          
          if (-not $copySuccess) {
            Write-Host "❌ Deployment failed - could not copy files"
            exit 1
          }

          Write-Host "`n=== Deployment Verification ==="
          try {
            $deployedFiles = Get-ChildItem -Path $targetPath -Recurse -File -ErrorAction SilentlyContinue
            Write-Host "Total files deployed: $($deployedFiles.Count)"
            
            # بررسی فایل‌های کلیدی
            $keyFiles = @("index.html", "assets", "search")
            foreach ($keyFile in $keyFiles) {
              $keyPath = Join-Path $targetPath $keyFile
              if (Test-Path $keyPath) {
                Write-Host "✅ Key component exists: $keyFile"
              } else {
                Write-Host "⚠️  Key component missing: $keyFile"
              }
            }
          }
          catch {
            Write-Host "⚠️  Could not verify deployment: $($_.Exception.Message)"
          }

      - name: Start IIS Application Pool
        shell: powershell
        run: |
          Write-Host "=== Starting IIS Application Pool ==="
          try {
            Import-Module WebAdministration -ErrorAction SilentlyContinue
            
            $appPoolName = "webkesht_docs"
            if (Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue) {
              Write-Host "Starting Application Pool: $appPoolName"
              Start-WebAppPool -Name $appPoolName -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 2
              
              $poolState = (Get-IISAppPool -Name $appPoolName).State
              Write-Host "Application Pool state: $poolState"
            }
          }
          catch {
            Write-Host "Warning: Could not start IIS Application Pool: $($_.Exception.Message)"
          }
          
          Write-Host "✅ Deployment process completed!"
