name: Deploy MkDocs to IIS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy MkDocs Site V4
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Debug Environment and Build
        shell: powershell
        run: |
          Write-Host "=== Environment Information ==="
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Python version:"
          python --version
          Write-Host "MkDocs version:"
          python -m mkdocs --version
          
          Write-Host "`n=== Project Structure ==="
          Write-Host "Repository contents:"
          Get-ChildItem -Path "${{ github.workspace }}" -Recurse | Select-Object Name, FullName | Format-Table -AutoSize
          
          Write-Host "`n=== MkDocs Configuration Check ==="
          $configFile = "${{ github.workspace }}\mkdocs.yml"
          if (Test-Path $configFile) {
            Write-Host "mkdocs.yml found. Contents:"
            Get-Content $configFile
          } else {
            Write-Host "ERROR: mkdocs.yml not found in repository root"
            Write-Host "Available files in root:"
            Get-ChildItem -Path "${{ github.workspace }}" | Select-Object Name, FullName | Format-Table -AutoSize
          }
          
          Write-Host "`n=== Attempting MkDocs Build ==="
          try {
            Set-Location "${{ github.workspace }}"
            Write-Host "Building MkDocs site..."
            python -m mkdocs build --clean --verbose 2>&1 | Tee-Object -Variable buildOutput
            Write-Host "Build output: $buildOutput"
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Build successful!"
              
              Write-Host "`nBuild output structure:"
              if (Test-Path "${{ github.workspace }}\site") {
                Get-ChildItem -Path "${{ github.workspace }}\site" -Recurse | Select-Object Name, FullName | Format-Table -AutoSize
              } else {
                Write-Host "ERROR: Site directory not created"
              }
            } else {
              Write-Host "ERROR: Build failed with exit code $LASTEXITCODE"
              Write-Host "Build output: $buildOutput"
              exit 1
            }
          } catch {
            Write-Host "ERROR: Exception during build - $($_.Exception.Message)"
            Write-Host "Exception details: $($_.Exception)"
            exit 1
          }

      - name: Deploy to IIS
        if: success()
        shell: powershell
        run: |
          $targetPath = "C:\inetpub\wwwroot\webkesht_docs"
          
          # بررسی ساختار site directory
          Write-Host "=== Checking build output ==="
          $siteDir = "${{ github.workspace }}\site"
          if (Test-Path $siteDir) {
            Write-Host "Site directory contents:"
            Get-ChildItem -Path $siteDir -Recurse | Select-Object Name, FullName | Format-Table -AutoSize
            
            # بررسی وجود پوشه fa
            $sourcePath = "$siteDir\fa"
            if (Test-Path $sourcePath) {
              Write-Host "Found FA directory: $sourcePath"
            } else {
              Write-Host "FA directory not found, using site root: $siteDir"
              $sourcePath = $siteDir
            }
          } else {
            Write-Host "ERROR: Site directory not found"
            exit 1
          }

          Write-Host "Deploying from '$sourcePath' to '$targetPath'..."

          if (-not (Test-Path $targetPath)) {
            Write-Host "Creating target directory..."
            New-Item -ItemType Directory -Force -Path $targetPath
          }

          Write-Host "Cleaning target directory..."
          Get-ChildItem -Path $targetPath -Recurse -ErrorAction SilentlyContinue | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue

          Write-Host "Copying files..."
          Copy-Item -Path "$sourcePath\*" -Destination $targetPath -Recurse -Force

          Write-Host "Deployment completed successfully!"
          
          Write-Host "`nFinal deployment verification:"
          Get-ChildItem -Path $targetPath | Select-Object Name, LastWriteTime | Format-Table -AutoSize
