name: Deploy MkDocs to IIS - Debug Fixed V4

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy MkDocs Site
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Environment Check
        shell: powershell
        run: |
          Write-Host "=== Environment Check ==="
          Set-Location "${{ github.workspace }}"
          Write-Host "Current directory: $(Get-Location)"
          
          Write-Host "`n=== File Structure ==="
          Get-ChildItem -Recurse | Select-Object FullName | Format-Table -AutoSize
          
          Write-Host "`n=== MkDocs Configuration Content ==="
          $configContent = Get-Content -Path "mkdocs.yml" -Encoding UTF8
          Write-Host "Configuration file content:"
          $configContent | ForEach-Object { Write-Host "  $_" }

      - name: Test MkDocs Commands
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}"
          
          Write-Host "=== Testing Basic MkDocs Commands ==="
          
          Write-Host "Testing mkdocs version:"
          & python -m mkdocs --version
          Write-Host "Version test completed with exit code: $LASTEXITCODE"
          
          Write-Host "`nTesting mkdocs help (first few lines):"
          $helpOutput = & python -m mkdocs --help 2>&1
          $helpOutput | Select-Object -First 10 | ForEach-Object { Write-Host $_ }
          Write-Host "Help test completed with exit code: $LASTEXITCODE"
          
          Write-Host "`nMkDocs commands test completed successfully!"

      - name: Test YAML Parsing
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}"
          
          Write-Host "=== Testing Python YAML parsing ==="
          
          # ایجاد فایل Python موقت برای تست
          $pythonCode = 'import yaml' + "`n"
          $pythonCode += 'import sys' + "`n"
          $pythonCode += 'sys.stdout.reconfigure(encoding="utf-8")' + "`n"
          $pythonCode += 'with open("mkdocs.yml", "r", encoding="utf-8") as f:' + "`n"
          $pythonCode += '    config = yaml.safe_load(f)' + "`n"
          $pythonCode += '    print("YAML parsing successful!")' + "`n"
          $pythonCode += '    print("Site name:", config.get("site_name", "Not found"))' + "`n"
          $pythonCode += '    print("Theme name:", config.get("theme", {}).get("name", "Not found"))'
          
          $pythonCode | Out-File -FilePath "test_yaml.py" -Encoding UTF8
          
          & python test_yaml.py
          Write-Host "YAML parsing test completed with exit code: $LASTEXITCODE"
          
          Remove-Item "test_yaml.py" -ErrorAction SilentlyContinue

      - name: Test Minimal Configuration
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}"
          
          Write-Host "=== Creating Minimal Test Configuration ==="
          
          # ایجاد پوشه docs با فایل index
          if (-not (Test-Path "docs_test")) {
            New-Item -ItemType Directory -Name "docs_test" -Force
            "# Test Page`n`nThis is a test page." | Out-File -FilePath "docs_test\index.md" -Encoding UTF8
          }
          
          # اضافه کردن docs directory به کانفیگ
          $minimalConfig = 'site_name: Test Site' + "`n"
          $minimalConfig += 'docs_dir: docs_test' + "`n"
          $minimalConfig += 'theme:' + "`n"
          $minimalConfig += '  name: material'
          
          $minimalConfig | Out-File -FilePath "mkdocs_test.yml" -Encoding UTF8
          
          Write-Host "Minimal config content:"
          Get-Content "mkdocs_test.yml" | ForEach-Object { Write-Host "  $_" }
          
          Write-Host "`nTesting with minimal configuration:"
          $output = & python -m mkdocs build --config-file mkdocs_test.yml --verbose 2>&1
          $exitCode = $LASTEXITCODE
          
          Write-Host "Exit Code: $exitCode"
          Write-Host "Output:"
          $output | ForEach-Object { Write-Host "  $_" }
          
          if ($exitCode -eq 0) {
            Write-Host "Minimal config test PASSED"
            if (Test-Path "site") {
              Write-Host "Site directory created for minimal test"
              Remove-Item -Path "site" -Recurse -Force -ErrorAction SilentlyContinue
            }
          } else {
            Write-Host "Minimal config test FAILED with exit code: $exitCode"
          }
          
          # پاکسازی فایل‌های تست
          Remove-Item "mkdocs_test.yml" -ErrorAction SilentlyContinue
          Remove-Item -Path "docs_test" -Recurse -Force -ErrorAction SilentlyContinue

      - name: Prepare Required Files
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}"
          
          Write-Host "=== Checking Required Directories ==="
          if (-not (Test-Path "docs")) {
            Write-Host "Creating docs directory with index file..."
            New-Item -ItemType Directory -Name "docs" -Force
            "# Welcome`n`nThis is the homepage." | Out-File -FilePath "docs\index.md" -Encoding UTF8
          } else {
            Write-Host "Docs directory exists:"
            Get-ChildItem "docs" | ForEach-Object { Write-Host "  $($_.Name)" }
          }
          
          if (-not (Test-Path "overrides")) {
            Write-Host "Creating overrides directory (referenced in theme.custom_dir)..."
            New-Item -ItemType Directory -Name "overrides" -Force
            Write-Host "Overrides directory created"
          } else {
            Write-Host "Overrides directory exists"
          }
          
          if (-not (Test-Path "stylesheets")) {
            Write-Host "Creating stylesheets directory with custom.css..."
            New-Item -ItemType Directory -Name "stylesheets" -Force
            "/* Custom CSS */" | Out-File -FilePath "stylesheets\custom.css" -Encoding UTF8
            Write-Host "Stylesheets directory and custom.css created"
          } else {
            Write-Host "Stylesheets directory exists"
            if (-not (Test-Path "stylesheets\custom.css")) {
              "/* Custom CSS */" | Out-File -FilePath "stylesheets\custom.css" -Encoding UTF8
              Write-Host "Created missing custom.css"
            }
          }

      - name: Build Site
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}"
          
          Write-Host "=== Building Site with Original Configuration ==="
          
          # تنظیم environment variables برای UTF-8
          $env:PYTHONIOENCODING = "utf-8"
          $env:LANG = "en_US.UTF-8"
          
          Write-Host "Running mkdocs build with verbose output..."
          
          # اجرای دستور و گرفتن خروجی
          $buildOutput = & python -m mkdocs build --clean --verbose 2>&1
          $exitCode = $LASTEXITCODE
          
          Write-Host "Process exit code: $exitCode"
          Write-Host "`nBuild Output:"
          $buildOutput | ForEach-Object { Write-Host "  $_" }
          
          if ($exitCode -eq 0) {
            Write-Host "`n=== Build Successful ==="
            if (Test-Path "site") {
              Write-Host "Site directory created successfully"
              
              # نمایش ساختار اصلی سایت
              Write-Host "`nSite structure:"
              Get-ChildItem -Path "site" | Select-Object Name, Length | Format-Table -AutoSize
              
              # بررسی پوشه fa
              if (Test-Path "site\fa") {
                Write-Host "`nFA directory contents:"
                Get-ChildItem -Path "site\fa" | Select-Object Name, Length | Format-Table -AutoSize
              } else {
                Write-Host "`nFA directory not created - using default site directory"
              }
            }
          } else {
            Write-Host "`n=== Build Failed ==="
            Write-Host "Exit code: $exitCode"
            exit $exitCode
          }

      - name: Deploy to IIS
        if: success()
        shell: powershell
        run: |
          Write-Host "=== Starting Deployment ==="
          $targetPath = "C:\inetpub\wwwroot\webkesht_docs"
          
          # تشخیص مسیر صحیح source
          if (Test-Path "${{ github.workspace }}\site\fa") {
            $sourcePath = "${{ github.workspace }}\site\fa"
            Write-Host "Using FA-specific build: $sourcePath"
          } else {
            $sourcePath = "${{ github.workspace }}\site"
            Write-Host "Using main site build: $sourcePath"
          }

          Write-Host "Deploying from '$sourcePath' to '$targetPath'..."

          if (-not (Test-Path $targetPath)) {
            Write-Host "Creating target directory..."
            New-Item -ItemType Directory -Force -Path $targetPath
          }

          Write-Host "Cleaning target directory..."
          Get-ChildItem -Path $targetPath -Recurse -ErrorAction SilentlyContinue | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue

          Write-Host "Copying files..."
          Copy-Item -Path "$sourcePath\*" -Destination $targetPath -Recurse -Force

          Write-Host "`n=== Deployment Verification ==="
          $deployedFiles = Get-ChildItem -Path $targetPath -Recurse -File
          Write-Host "Total files deployed: $($deployedFiles.Count)"
          
          Write-Host "=== Deployment completed successfully! ==="
