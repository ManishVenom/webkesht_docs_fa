name: Deploy MkDocs to IIS - Enhanced Version V3-Fixed

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy MkDocs Site Enhanced V3
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Environment Check & Preparation
        shell: powershell
        run: |
          Write-Host "=== Environment Check ==="
          Set-Location "${{ github.workspace }}"
          Write-Host "Current directory: $(Get-Location)"
          
          if (Test-Path "mkdocs.yml") {
            Write-Host "‚úÖ mkdocs.yml found"
          } else {
            Write-Host "‚ùå mkdocs.yml not found!"
            exit 1
          }
          
          $requiredDirs = @("docs", "overrides", "stylesheets")
          foreach ($dir in $requiredDirs) {
            if (-not (Test-Path $dir)) {
              Write-Host "Creating missing directory: $dir"
              New-Item -ItemType Directory -Name $dir -Force
              
              if ($dir -eq "docs" -and -not (Test-Path "docs\index.md")) {
                "# Welcome`n`nThis is the homepage." | Out-File -FilePath "docs\index.md" -Encoding UTF8
              }
              if ($dir -eq "stylesheets" -and -not (Test-Path "stylesheets\custom.css")) {
                "/* Custom CSS */" | Out-File -FilePath "stylesheets\custom.css" -Encoding UTF8
              }
            } else {
              Write-Host "‚úÖ Directory exists: $dir"
            }
          }

      - name: Test MkDocs Configuration
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}"
          
          Write-Host "=== Testing MkDocs Configuration ==="
          
          Write-Host "MkDocs version:"
          python -m mkdocs --version
          
          Write-Host "`nTesting MkDocs configuration directly..."
          
          try {
            Write-Host "Testing MkDocs config validation..."
            python -m mkdocs config
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "‚úÖ MkDocs configuration is valid!"
            } else {
              Write-Host "‚ö†Ô∏è  MkDocs config validation returned non-zero code but continuing..."
            }
            
            Write-Host "`nTesting configuration syntax with MkDocs serve (dry-run)..."
            $testResult = python -m mkdocs serve --help 2>&1
            Write-Host "‚úÖ MkDocs commands are accessible"
            
          } catch {
            Write-Host "‚ö†Ô∏è  Configuration test warning: $($_.Exception.Message)"
            Write-Host "Continuing with build process..."
          }

      - name: Build MkDocs Site
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}"
          
          Write-Host "=== Building MkDocs Site ==="
          
          $env:PYTHONIOENCODING = "utf-8"
          $env:LANG = "en_US.UTF-8"
          $env:PYTHONPATH = "$env:PYTHONPATH;C:\Python313\Lib\site-packages"
          
          Write-Host "Running: python -m mkdocs build --clean --verbose"
          python -m mkdocs build --clean --verbose
          
          $buildExitCode = $LASTEXITCODE
          Write-Host "Build exit code: $buildExitCode"
          
          # ÿ™ÿµÿ≠€åÿ≠ ÿ¥ÿØŸá: ÿ®ŸÑŸà⁄© if ÿ®ÿß ÿ¢⁄©ŸàŸÑÿßÿØŸáÿß€å ÿµÿ≠€åÿ≠
          if ($buildExitCode -eq 0) {
            Write-Host "‚úÖ Build successful!"
            
            if (Test-Path "site") {
              $siteFiles = Get-ChildItem -Path "site" -Recurse -File
              Write-Host "Generated files count: $($siteFiles.Count)"
              
              Write-Host "`nSite directory structure:"
              Get-ChildItem -Path "site" -Directory | ForEach-Object { 
                Write-Host "  üìÅ $($_.Name)" 
              }
              
              if (Test-Path "site\fa") {
                Write-Host "‚úÖ FA-specific build directory found: site\fa"
              } elseif (Test-Path "site\ar") {
                Write-Host "‚úÖ AR-specific build directory found: site\ar"
              } else {
                Write-Host "‚úÖ Using main site directory: site"
              }
            } else {
              Write-Host "‚ùå Site directory not created!"
              
              Write-Host "`nCurrent directory contents:"
              Get-ChildItem | ForEach-Object { Write-Host "  $($_.Name)" }
              exit 1
            }
          } else {
            Write-Host "‚ùå Build failed!"
            Write-Host "`nTrying to show more detailed error information..."
            
            try {
              python -m mkdocs build --verbose --strict 2>&1 | Write-Host
            } catch {
              Write-Host "Could not get detailed error info"
            }
            
            exit $buildExitCode
          }

      - name: Smart Deploy to IIS
        shell: powershell
        run: |
          Write-Host "=== Smart IIS Deployment ==="
          
          $targetPath = "C:\inetpub\wwwroot\webkesht_docs"
          
          $sourcePath = ""
          $possiblePaths = @(
            "${{ github.workspace }}\site\fa",
            "${{ github.workspace }}\site\ar", 
            "${{ github.workspace }}\site"
          )
          
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $sourcePath = $path
              Write-Host "‚úÖ Using build directory: $sourcePath"
              break
            }
          }
          
          if (-not $sourcePath) {
            Write-Host "‚ùå No valid source directory found!"
            Write-Host "Checked paths:"
            foreach ($path in $possiblePaths) {
              Write-Host "  - $path ($(if (Test-Path $path) {'EXISTS'} else {'NOT FOUND'}))"
            }
            exit 1
          }

          Write-Host "Deploying from '$sourcePath' to '$targetPath'..."

          Write-Host "`n--- IIS Management (Optional) ---"
          try {
            Import-Module WebAdministration -ErrorAction SilentlyContinue
            
            $appPoolName = "webkesht_docs"
            $appPool = Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue
            
            if ($appPool) {
              Write-Host "Stopping Application Pool: $appPoolName"
              Stop-WebAppPool -Name $appPoolName -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 5
              Write-Host "‚úÖ Application Pool stopped"
            } else {
              Write-Host "‚ö†Ô∏è  Application Pool '$appPoolName' not found - continuing without IIS management"
            }
          } catch {
            Write-Host "‚ö†Ô∏è  IIS management skipped: $($_.Exception.Message)"
          }

          Write-Host "`n--- Target Directory Management ---"
          if (-not (Test-Path $targetPath)) {
            Write-Host "Creating target directory..."
            New-Item -ItemType Directory -Force -Path $targetPath
          }
          
          try {
            $currentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
            icacls $targetPath /grant "${currentUser}:(OI)(CI)F" /T /C /Q
            icacls $targetPath /grant "IIS_IUSRS:(OI)(CI)F" /T /C /Q
            Write-Host "‚úÖ Permissions set for $currentUser and IIS_IUSRS"
          } catch {
            Write-Host "‚ö†Ô∏è  Permission warning: $($_.Exception.Message)"
          }

          Write-Host "`n--- Smart Cleanup ---"
          if (Test-Path $targetPath) {
            try {
              $protectedFiles = @("web.config", ".htaccess", "robots.txt", "favicon.ico")
              $backupPath = "$env:TEMP\iis_backup_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
              
              $backedUpFiles = @()
              foreach ($protectedFile in $protectedFiles) {
                $filePath = Join-Path $targetPath $protectedFile
                if (Test-Path $filePath) {
                  if (-not (Test-Path $backupPath)) {
                    New-Item -ItemType Directory -Force -Path $backupPath
                  }
                  Copy-Item $filePath "$backupPath\$protectedFile" -Force
                  $backedUpFiles += $protectedFile
                  Write-Host "Backed up: $protectedFile"
                }
              }
              
              $maxRetries = 3
              $retryCount = 0
              $cleanSuccess = $false
              
              while ($retryCount -lt $maxRetries -and -not $cleanSuccess) {
                try {
                  Get-ChildItem -Path $targetPath -Recurse -Force | 
                    Where-Object { $_.FullName -notlike "*backup*" } |
                    Remove-Item -Force -Recurse -ErrorAction Stop
                  $cleanSuccess = $true
                  Write-Host "‚úÖ Directory cleaned successfully"
                } catch {
                  $retryCount++
                  Write-Host "Cleanup retry $retryCount/$maxRetries... ($($_.Exception.Message))"
                  Start-Sleep -Seconds 3
                }
              }
              
              if (-not $cleanSuccess) {
                Write-Host "‚ö†Ô∏è  Could not fully clean directory, but continuing..."
              }
              
              if ((Test-Path $backupPath) -and ($backedUpFiles.Count -gt 0)) {
                Copy-Item "$backupPath\*" $targetPath -Force -ErrorAction SilentlyContinue
                Remove-Item $backupPath -Recurse -Force -ErrorAction SilentlyContinue
                Write-Host "Protected files restored: $($backedUpFiles -join ', ')"
              }
              
            } catch {
              Write-Host "‚ö†Ô∏è  Cleanup warning: $($_.Exception.Message)"
            }
          }

          Write-Host "`n--- Smart Copy with ROBOCOPY ---"
          $copySuccess = $false
          
          try {
            $robocopyArgs = @(
              "`"$sourcePath`"",
              "`"$targetPath`"",
              "/E",
              "/R:2",
              "/W:3",
              "/MT:2",
              "/XO",
              "/NFL",
              "/NDL"
            )
            
            $robocopyCmd = "robocopy " + ($robocopyArgs -join " ")
            Write-Host "Running: $robocopyCmd"
            
            & cmd.exe /c $robocopyCmd
            $robocopyExitCode = $LASTEXITCODE
            
            if ($robocopyExitCode -le 7) {
              Write-Host "‚úÖ ROBOCOPY completed successfully (exit code: $robocopyExitCode)"
              $copySuccess = $true
            } else {
              throw "ROBOCOPY failed with exit code: $robocopyExitCode"
            }
          } catch {
            Write-Host "‚ö†Ô∏è  ROBOCOPY failed: $($_.Exception.Message)"
            Write-Host "Falling back to PowerShell copy..."
            
            try {
              Copy-Item -Path "$sourcePath\*" -Destination $targetPath -Recurse -Force
              Write-Host "‚úÖ PowerShell copy succeeded"
              $copySuccess = $true
            } catch {
              Write-Host "‚ùå All copy methods failed: $($_.Exception.Message)"
              exit 1
            }
          }

          Write-Host "`n--- Deployment Verification ---"
          if ($copySuccess) {
            try {
              $deployedFiles = Get-ChildItem -Path $targetPath -Recurse -File
              Write-Host "‚úÖ Deployment successful!"
              Write-Host "Total files deployed: $($deployedFiles.Count)"
              
              $keyFiles = @("index.html", "404.html")
              foreach ($keyFile in $keyFiles) {
                $keyFilePath = Join-Path $targetPath $keyFile
                if (Test-Path $keyFilePath) {
                  $fileSize = (Get-Item $keyFilePath).Length
                  Write-Host "‚úÖ Key file exists: $keyFile ($fileSize bytes)"
                } else {
                  Write-Host "‚ö†Ô∏è  Key file missing: $keyFile"
                }
              }
              
              Write-Host "`nDeployed directory structure:"
              Get-ChildItem -Path $targetPath -Directory | Select-Object -First 10 | ForEach-Object { 
                Write-Host "  üìÅ $($_.Name)" 
              }
              
            } catch {
              Write-Host "‚ö†Ô∏è  Verification warning: $($_.Exception.Message)"
            }
          }

          Write-Host "`n--- Restart IIS Services ---"
          try {
            if ($appPool) {
              Write-Host "Starting Application Pool: $appPoolName"
              Start-WebAppPool -Name $appPoolName -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 3
              
              $appPoolState = (Get-WebAppPoolState -Name $appPoolName).Value
              Write-Host "Application Pool state: $appPoolState"
              Write-Host "‚úÖ Application Pool management completed"
            }
          } catch {
            Write-Host "‚ö†Ô∏è  IIS restart warning: $($_.Exception.Message)"
          }
          
          Write-Host "`nüéâ Smart deployment completed successfully!"
          Write-Host "Site should be available at your configured IIS endpoint"