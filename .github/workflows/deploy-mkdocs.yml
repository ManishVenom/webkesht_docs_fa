name: Deploy MkDocs to IIS - v2 (Optimized)

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy MkDocs Site
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Environment Check
        shell: powershell
        run: |
          Write-Host "=== Environment Check ==="
          Set-Location "${{ github.workspace }}"
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Running as: $($env:USERNAME)"
          
          if (Test-Path "mkdocs.yml") {
            Write-Host "mkdocs.yml found"
          } else {
            Write-Host "mkdocs.yml not found"
            exit 1
          }

      - name: Build MkDocs Site
        shell: powershell
        run: |
          Set-Location "${{ github.workspace }}"
          
          Write-Host "=== Building MkDocs Site ==="
          
          $env:PYTHONIOENCODING = "utf-8"
          $env:LANG = "en_US.UTF-8"
          
          Write-Host "Running mkdocs build"
          python -m mkdocs build --clean --verbose
          
          $buildExitCode = $LASTEXITCODE
          Write-Host "Build exit code: $buildExitCode"
          
          if ($buildExitCode -eq 0) {
            Write-Host "Build successful"
            if (Test-Path "site") {
              Write-Host "Site directory created"
            } else {
              Write-Host "Site directory not found"
              exit 1
            }
          } else {
            Write-Host "Build failed"
            exit $buildExitCode
          }

      - name: Deploy to IIS with Admin Rights
        shell: powershell
        run: |
          Write-Host "=== IIS Deployment with Admin Rights ==="
          
          $targetPath = "C:\inetpub\wwwroot\webkesht_docs"
          $sourcePath = "${{ github.workspace }}\site"
          
          if (Test-Path "${{ github.workspace }}\site\fa") {
            $sourcePath = "${{ github.workspace }}\site\fa"
            Write-Host "Using FA directory"
          } elseif (Test-Path "${{ github.workspace }}\site\ar") {
            $sourcePath = "${{ github.workspace }}\site\ar"
            Write-Host "Using AR directory"
          } else {
            Write-Host "Using main site directory"
          }
          
          Write-Host "Source: $sourcePath"
          Write-Host "Target: $targetPath"
          Write-Host "Current User: $($env:USERNAME)"
          Write-Host "Current Process: $($PID)"
          
          # Check if running as administrator
          $currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
          $isAdmin = $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
          Write-Host "Running as Administrator: $isAdmin"
          
          # Stop IIS App Pool
          try {
            Import-Module WebAdministration -ErrorAction SilentlyContinue
            $appPoolName = "webkesht_docs"
            if (Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue) {
              Write-Host "Stopping App Pool: $appPoolName"
              Stop-WebAppPool -Name $appPoolName -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 5
              Write-Host "App pool stopped"
            } else {
              Write-Host "App pool not found: $appPoolName"
            }
          } catch {
            Write-Host "IIS App Pool management failed: $($_.Exception.Message)"
          }
          
          # Create target directory
          if (-not (Test-Path $targetPath)) {
            try {
              New-Item -ItemType Directory -Force -Path $targetPath
              Write-Host "Target directory created: $targetPath"
            } catch {
              Write-Host "Failed to create directory: $($_.Exception.Message)"
              exit 1
            }
          }
          
          # Set permissions only if missing
          try {
            $acl = Get-Acl $targetPath
            $hasIIS_IUSRS = $acl.Access | Where-Object { $_.IdentityReference -like "*IIS_IUSRS" }
            if (-not $hasIIS_IUSRS) {
              Write-Host "Setting permissions on target directory"
              $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS_IUSRS", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
              $acl.SetAccessRule($accessRule)
              $accessRule2 = New-Object System.Security.AccessControl.FileSystemAccessRule("IUSR", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
              $acl.SetAccessRule($accessRule2)
              $accessRule3 = New-Object System.Security.AccessControl.FileSystemAccessRule($env:USERNAME, "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
              $acl.SetAccessRule($accessRule3)
              Set-Acl -Path $targetPath -AclObject $acl
              Write-Host "Permissions set successfully"
            } else {
              Write-Host "Permissions already set — skipping"
            }
          } catch {
            Write-Host "Permission setting failed: $($_.Exception.Message)"
          }
          
          # Fast clean of target directory
          try {
            Write-Host "Cleaning target directory"
            Remove-Item -LiteralPath "$targetPath\*" -Recurse -Force -ErrorAction SilentlyContinue
            Write-Host "Target directory cleaned"
          } catch {
            Write-Host "Clean failed: $($_.Exception.Message)"
          }
          
          # Copy files
          try {
            Write-Host "Copying files with PowerShell Copy-Item"
            Copy-Item -Path "$sourcePath\*" -Destination $targetPath -Recurse -Force -ErrorAction Stop
            Write-Host "PowerShell copy successful"
            $copySuccess = $true
          } catch {
            Write-Host "PowerShell copy failed: $($_.Exception.Message)"
            $copySuccess = $false
          }
          
          if (-not $copySuccess) {
            try {
              Write-Host "Trying ROBOCOPY with /B (backup mode)"
              $robocopyArgs = @(
                $sourcePath,
                $targetPath,
                "/E",
                "/B",
                "/R:1",
                "/W:1",
                "/NFL",
                "/NDL"
              )
              & robocopy @robocopyArgs
              if ($LASTEXITCODE -le 7) { $copySuccess = $true }
            } catch { }
          }
          
          if (-not $copySuccess) {
            try {
              Write-Host "Trying XCOPY as final fallback"
              & xcopy "$sourcePath\*" $targetPath /E /I /Y /Q
              if ($LASTEXITCODE -eq 0) { $copySuccess = $true }
            } catch { }
          }
          
          if (-not $copySuccess) { exit 1 }
          
          # Start IIS App Pool
          try {
            if (Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue) {
              Write-Host "Starting App Pool: $appPoolName"
              Start-WebAppPool -Name $appPoolName -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 3
              Write-Host "App pool started"
            }
          } catch { }
          
          # Verify deployment
          try {
            $deployedFiles = Get-ChildItem -Path $targetPath -Recurse -File -ErrorAction Stop
            if (Test-Path "$targetPath\index.html") {
              $indexSize = (Get-Item "$targetPath\index.html").Length
              Write-Host "index.html size: $indexSize bytes"
            }
            Write-Host "✅ Deployment OK — Files: $($deployedFiles.Count), Time: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          } catch {
            Write-Host "Verification failed: $($_.Exception.Message)"
          }
